version: 0.2
env:
  git-credential-helper: yes
  shell: bash
phases:
#  install:
#    runtime-versions:
#      docker: 20
      #nodejs: 12
  pre_build:
    commands:
  #    - echo Logging in to ECR...
  #    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - aws configure set region $AWS_DEFAULT_REGION
      - echo $KUBE_SECRET_NAME
      - SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id $KUBE_SECRET_NAME --query 'SecretString' --output text)
      - echo "$SECRET_JSON" > kubeconfig.yaml
      - cat kubeconfig.yaml
      - whoami
      - export KUBECONFIG=kubeconfig.yaml
      - aws eks --region us-east-1 update-kubeconfig --name comm-cluster
      - cd /root
      - ls -la 
      - cat /codebuild/output/src*/src/kubeconfig.yaml
  #    - |
  #      SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id $KUBE_SECRET_NAME --query 'SecretString' --output text)
  #      echo "$SECRET_JSON" > kubeconfig.yaml
  #    - export KUBECONFIG=kubeconfig.yaml
  
  #build:
  #  commands:
  #    - echo Build started on `date`
  #    - echo Building the grpcserver Docker image...
  #    - docker build app/grpcserver/. -t $GRPC_IMAGE_TAG
  #    - docker tag $GRPC_IMAGE_TAG:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$GRPC_IMAGE_TAG     
  #    - echo Building the webserver Docker image...
  #    - docker build app/webserver/. -t $WEB_IMAGE_TAG
  #    - docker tag $WEB_IMAGE_TAG:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$WEB_IMAGE_TAG     
  #    - echo Build completed on `date`
  #    - docker images

  post_build:
    commands:
      # este si - echo "Pushing the grpc-server Docker image to ECR Repo $IMAGE_REPO_NAME"
      # este si - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$GRPC_IMAGE_TAG
      # este si - echo "Pushing the  web-server Docker image to ECR Repo $IMAGE_REPO_NAME"
      # este si - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$WEB_IMAGE_TAG 
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      #- echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      #- CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      #- export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      #- export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      #- export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      #- export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster              
      # este si - echo "Update Kube Config"      
      #- aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # este si - aws eks --region us-east-1 update-kubeconfig --name comm-cluster
      - kubectl get nodes
      # Apply changes to our Application using kubectl
      #- echo "Apply changes to kube manifests"            
      #- kubectl apply -f kube-manifests/
      #- echo "Completed applying changes to Kubernetes Objects"           
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      #- printf '[{"name":"01-DEVOPS-Nginx-Deployment.yml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
      # Additional Commands to view your credentials      
      #- echo "Credentials Value is..  ${CREDENTIALS}"      
      #- echo "AWS_ACCESS_KEY_ID...  ${AWS_ACCESS_KEY_ID}"            
      #- echo "AWS_SECRET_ACCESS_KEY...  ${AWS_SECRET_ACCESS_KEY}"            
      #- echo "AWS_SESSION_TOKEN...  ${AWS_SESSION_TOKEN}"            
      #- echo "AWS_EXPIRATION...  $AWS_EXPIRATION"             
      #- echo "EKS_CLUSTER_NAME...  $EKS_CLUSTER_NAME