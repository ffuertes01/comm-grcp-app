version: 0.2
env:
  git-credential-helper: yes
  shell: bash
phases:
#  install:
#    runtime-versions:
#      docker: 20
      #nodejs: 12
  pre_build:
    commands:
      ## Install kustomize
      #- echo Install kustomize...
      #- curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
      #- mv ./kustomize /usr/bin/kustomize && chmod +x /usr/bin/kustomize
      #- kustomize version
      ## Install yq
      #- wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
      #- yq --version
      # Import credentials
      #- jq -c '.token = "${GITHUB_TOKEN}"' import-source-credentials.json > tmp.$$.json && mv tmp.$$.json import-source-credentials.json
      #- aws codebuild import-source-credentials --cli-input-json file://import-source-credentials.json
      #- aws codebuild list-source-credentials
      # Login to ECR
      - echo Logging in to ECR...
      #- aws --version
      #- aws sts get-caller-identity
      #- aws ecr get-login-password --region $AWS_DEFAULT_REGION  
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      #- echo "Changing to application directory..."
      #- cd app
      #- pwd
      #- ls -l
      ## Install nodejs application dependencies
      #- echo "Installing dependencies..."
      #- npm install

  build:
    commands:
      - echo Build started on `date`
      ## Run test
      #- echo Run node.js tests...
      #- npm run test
      ## Get application version 
      #- CONTAINER_IMAGE_TAG="$(node -e "console.log(require('./package.json').version);")"
      # Build the Docker images
      - echo Building the grpcserver Docker image...
      #- cd app/grpcserver
      - docker build app/grpcserver/. -t $GRPC_IMAGE_TAG
      - docker tag $GRPC_IMAGE_TAG:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$GRPC_IMAGE_TAG     
      - echo Building the webserver Docker image...
      #- cd app/grpcserver
      - docker build app/webserver/. -t $WEB_IMAGE_TAG
      - docker tag $WEB_IMAGE_TAG:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$WEB_IMAGE_TAG     
      - echo Build completed on `date`
      - docker images
      #- docker build -t lukondefmwila/express-test:$CONTAINER_IMAGE_TAG .
      # Log in to the Docker CLI
      #- echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
      #- cd ..

  post_build:
    commands:
      - echo "Pushing the grpc-server Docker image to ECR Repo $IMAGE_REPO_NAME"
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$GRPC_IMAGE_TAG
      - echo "Pushing the  web-server Docker image to ECR Repo $IMAGE_REPO_NAME"
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$WEB_IMAGE_TAG 
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      #- echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      #- CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      #- export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      #- export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      #- export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      #- export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster              
      - echo "Update Kube Config"      
      #- aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - aws eks --region us-east-1 update-kubeconfig --name comm-cluster
      - kubectl get nodes
      # Apply changes to our Application using kubectl
      #- echo "Apply changes to kube manifests"            
      #- kubectl apply -f kube-manifests/
      #- echo "Completed applying changes to Kubernetes Objects"           
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      #- printf '[{"name":"01-DEVOPS-Nginx-Deployment.yml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
      # Additional Commands to view your credentials      
      #- echo "Credentials Value is..  ${CREDENTIALS}"      
      #- echo "AWS_ACCESS_KEY_ID...  ${AWS_ACCESS_KEY_ID}"            
      #- echo "AWS_SECRET_ACCESS_KEY...  ${AWS_SECRET_ACCESS_KEY}"            
      #- echo "AWS_SESSION_TOKEN...  ${AWS_SESSION_TOKEN}"            
      #- echo "AWS_EXPIRATION...  $AWS_EXPIRATION"             
      #- echo "EKS_CLUSTER_NAME...  $EKS_CLUSTER_NAME